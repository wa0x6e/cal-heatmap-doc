"use strict";(self.webpackChunkcal_heatmap_doc=self.webpackChunkcal_heatmap_doc||[]).push([[3680],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),p=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,h=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(h,i(i({ref:t},s),{},{components:a})):n.createElement(h,i({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8332:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={title:"data",sidebar_position:6},i=void 0,l={unversionedId:"options/data",id:"options/data",title:"data",description:"Specify how to fetch and process the data used to fill the calendar",source:"@site/docs/options/data.md",sourceDirName:"options",slug:"/options/data",permalink:"/docs/options/data",draft:!1,editUrl:"https://github.com/wa0x6e/cal-heatmap-doc/edit/main/docs/options/data.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"data",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"date",permalink:"/docs/options/date"},next:{title:"verticalOrientation",permalink:"/docs/options/verticalOrientation"}},u={},p=[{value:"<code>source</code>",id:"source",level:2},{value:"Using a local object",id:"using-a-local-object",level:3},{value:"Fetching data from a remote source",id:"fetching-data-from-a-remote-source",level:3},{value:"Injecting dynamic date",id:"injecting-dynamic-date",level:4},{value:"<code>type</code>",id:"type",level:2},{value:"<code>requestInit</code>",id:"requestinit",level:2},{value:"<code>x</code>",id:"x",level:2},{value:"Example",id:"example",level:4},{value:"<code>y</code>",id:"y",level:2},{value:"Example",id:"example-1",level:4},{value:"<code>groupY</code>",id:"groupy",level:2},{value:"Example",id:"example-2",level:4},{value:"<code>defaultValue</code>",id:"defaultvalue",level:2}],s={toc:p},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",{className:"subhead"},"Specify how to fetch and process the data used to fill the calendar"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"type DataRecord = Record<string, string | number>;\ntype DataGroupType = 'sum' | 'count' | 'min' | 'max' | 'average';\n\ntype DataOptions = {\n  source: string | DataRecord[],\n  type: 'json' | 'csv' | 'tsv' | 'txt',\n  requestInit: object,\n  x: string | ((datum: DataRecord) => number),\n  y: string | ((datum: DataRecord) => number),\n  groupY:\n    | DataGroupType\n    | ((values: (number | string | null)[]) => number | string | null),\n  defaultValue: null | number | string,\n};\n")),(0,r.kt)("p",null,"The calendar is expecting an array of objects as input.",(0,r.kt)("br",{parentName:"p"}),"\n","There is no expected pre-defined structure for the object,\nbut it must at least have one or more property for the date,\nand another one for the value, which is usually a number, but string is also accepted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Classic object"',title:'"Classic','object"':!0},"[\n  { date: '2012-01-01', value: 3 },\n  { date: '2012-01-02', value: 6 },\n  ...\n];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Using timestamp"',title:'"Using','timestamp"':!0},"[\n  { t: 1673388319933, p: 3, v: 'Asia' },\n  { t: 1673388319934, p: 6, v: 'Europe' },\n  ...\n];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Using multiple properties to define a date"',title:'"Using',multiple:!0,properties:!0,to:!0,define:!0,a:!0,'date"':!0},"[\n  { year: 2020, month: 1, day: 1, temperature: 38 },\n  ...\n];\n")),(0,r.kt)("p",null,"More options are available below to instruct the calendar on\nhow to fetch, read and extract the date and value from your dataset."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"source"},(0,r.kt)("inlineCode",{parentName:"h2"},"source")),(0,r.kt)("p",null,"Data used to populate the calendar."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"source: string | DataRecord[],\n")),(0,r.kt)("p",null,"There are 2 ways to pass your data to the calendar:"),(0,r.kt)("h3",{id:"using-a-local-object"},"Using a local object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// highlight-start\nconst data = [\n  { date: '2012-01-01', value: 3 },\n  { date: '2012-01-02', value: 6 },\n];\n// highlight-end\n\nconst cal = new CalHeatmap();\ncal.paint({\n  // highlight-next-line\n  data: { source: data },\n});\n")),(0,r.kt)("h3",{id:"fetching-data-from-a-remote-source"},"Fetching data from a remote source"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," value will be interpreted as an url, and the data\nwill be retrieved via a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const cal = new CalHeatmap();\ncal.paint({\n  // highlight-next-line\n  data: { source: 'https://your-api.com/data.json' },\n});\n")),(0,r.kt)("h4",{id:"injecting-dynamic-date"},"Injecting dynamic date"),(0,r.kt)("p",null,"2 special tokens are available to customize your url,\nin order to limit the data time range from your remote source."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{{start=XXX}}")," will be replaced by the start of the first subDomain of the calendar"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{{end=XXX}}")," will be replaced by the end of the last subDomain of the calendar")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"XXX")," should be replaced by any ",(0,r.kt)("a",{parentName:"p",href:"https://day.js.org/docs/en/display/format"},"dayjs format token")," (",(0,r.kt)("a",{parentName:"p",href:"https://day.js.org/docs/en/plugin/advanced-format"},"Advanced tokens")," are also accepted)"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," time range are both inclusive.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The tokens' value will dynamically update on ",(0,r.kt)("a",{parentName:"p",href:"/docs/API/navigation/"},"navigation"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Usage"',title:'"Usage"'},"const cal = new CalHeatmap();\ncal.paint({\n  date: { start: new Date('2020-01-01') },\n  // highlight-next-line\n  data: {\n    source:\n      'https://your-api.com/data?start={{start=YYYY-MM-DD}}&end={{end=[year-]YYYY}}',\n  },\n});\n")),(0,r.kt)("p",null,"The above ",(0,r.kt)("inlineCode",{parentName:"p"},"date.source")," will output something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://your-api.com/data?start=2020-01-01&end=year-2020\n")),(0,r.kt)("p",null,"If the remote source is behind authentication, or requires additional request\ncustomization, see ",(0,r.kt)("a",{parentName:"p",href:"#requestinit"},"requestInit"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"},(0,r.kt)("inlineCode",{parentName:"a"},"Fetch"))," is used under the hood to load the remote resource.\nEnsure that your endpoint has ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"},"CORS")," setup properly.")),(0,r.kt)("h2",{id:"type"},(0,r.kt)("inlineCode",{parentName:"h2"},"type")),(0,r.kt)("p",null,"Parser used to interpret the data returned by your url source."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"type: 'json' | 'csv' | 'tsv' | 'txt',\n")),(0,r.kt)("p",null,"The parser will interpret the data, and convert it to an array of DataRecord."),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"json")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This option is used only when the ",(0,r.kt)("a",{parentName:"p",href:"#source"},(0,r.kt)("inlineCode",{parentName:"a"},"source"))," is an url.")),(0,r.kt)("h2",{id:"requestinit"},(0,r.kt)("inlineCode",{parentName:"h2"},"requestInit")),(0,r.kt)("p",null,"Additional ",(0,r.kt)("a",{parentName:"p",href:"https://fetch.spec.whatwg.org/#requestinit"},"requestInit")," options, send along your data request."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/d3/d3-fetch"},"d3-fetch")," is used under the hood to handle all network requests. See their documentation for further information and usage."),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This option is used only when the ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," is an url.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Usage"',title:'"Usage"'},"{\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n  }\n")),(0,r.kt)("h2",{id:"x"},(0,r.kt)("inlineCode",{parentName:"h2"},"x")),(0,r.kt)("p",null,"Property name of the date, or a function returning a timestamp.",(0,r.kt)("br",{parentName:"p"}),"\n","Instruct the calendar how to extract the ",(0,r.kt)("em",{parentName:"p"},"date")," property from your data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"x: string | ((datum: DataRecord) => number),\n")),(0,r.kt)("p",null,"You can either pass a:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"),": key name of the property holding the date, in your datum object. The date will be parsed using ",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date"},(0,r.kt)("inlineCode",{parentName:"a"},"Date.parse")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function"),": function taking the datum as argument, and should return a timestamp")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If your date is a string (e.g. '2020-01-01T00:00:00'), ensure that its format is ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601")," compliant (",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDTHH:mm:ss.sssZ"),"), or it may lead to inconsistency/precision loss."),(0,r.kt)("p",{parentName:"admonition"},"If possible, we recommend to always use timestamp, to avoid all timezone related issues.")),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Extract date using property name"',title:'"Extract',date:!0,using:!0,property:!0,'name"':!0},"// highlight-next-line\nvar data = [{ column1: '2012-01-01', column2: 3 }];\n\ncal.paint({\n  // highlight-next-line\n  data: { source: data, x: 'column1' },\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Extract date using a custom function"',title:'"Extract',date:!0,using:!0,a:!0,custom:!0,'function"':!0},"// highlight-next-line\nvar data = [{ column1: '2012-01-01', column2: 3 }];\n\ncal.paint({\n  data: {\n    source: data,\n    // highlight-start\n    x: datum => {\n      return +new Date(datum['column1']);\n    },\n    // highlight-end\n  },\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Compute date from multiple properties"',title:'"Compute',date:!0,from:!0,multiple:!0,'properties"':!0},"// highlight-next-line\nvar data = [{ year: 2020, month: 1, value: 3 }];\n\ncal.paint({\n  data: {\n    source: data,\n    // highlight-start\n    x: datum => {\n      return +new Date(datum['year'], datum['month'] - 1, 1);\n    },\n    // highlight-end\n  },\n});\n")),(0,r.kt)("h2",{id:"y"},(0,r.kt)("inlineCode",{parentName:"h2"},"y")),(0,r.kt)("p",null,"Property name of the the value, or a function returning the value.",(0,r.kt)("br",{parentName:"p"}),"\n","Instruct the calendar how to extract the ",(0,r.kt)("em",{parentName:"p"},"value")," property from your data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"y: string | ((datum: DataRecord) => number | string),\n")),(0,r.kt)("p",null,"You can either pass a:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"),": key name of the property holding the value, in your datum object. The value should be a number."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function"),": function taking the datum as argument, and should return the value, as a number or a string")),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Extract value using property name"',title:'"Extract',value:!0,using:!0,property:!0,'name"':!0},"// highlight-next-line\nvar data = [{ column1: '2012-01-01', column2: 3 }];\n\ncal.paint({\n  // highlight-next-line\n  data: { source: data, y: 'column2' },\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Extract value using a built-in function"',title:'"Extract',value:!0,using:!0,a:!0,"built-in":!0,'function"':!0},"// highlight-next-line\nvar data = [{ date: '2012-01-01', high: '30', low: '16' }];\n\ncal.paint({\n  data: {\n    source: data,\n    // highlight-start\n    y: datum => {\n      // You can use the function to pre-process your values\n      return +datum['high'] + +datum['low']) / 2;\n    },\n    // highlight-end\n  },\n});\n")),(0,r.kt)("h2",{id:"groupy"},(0,r.kt)("inlineCode",{parentName:"h2"},"groupY")),(0,r.kt)("p",null,"Aggregate function, to group all values from the same subDomain."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"type DataGroupType = 'sum' | 'count' | 'min' | 'max' | 'average';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"groupY:\n  | DataGroupType\n  | ((values: (number | string | null)[]) => number | string | null),\n")),(0,r.kt)("p",null,"You can either pass a:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string"),": name of a built-in aggregate function (see ",(0,r.kt)("em",{parentName:"li"},"DataGroupType"),"), only available if your values are numeric"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function"),": function taking an array of datum from the same subDomain, and should return a new aggregated value.")),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"sum")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If your values are non-numeric, you have to use ",(0,r.kt)("inlineCode",{parentName:"p"},"count"),", or implement your own aggregation strategy")),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="data.js"',title:'"data.js"'},"var data = [\n  { column1: '2012-01-01', column2: 3 },\n  { column1: '2012-01-01', column2: 4 },\n  { column1: '2012-01-02', column2: 5 },\n];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Group using a built-in function"',title:'"Group',using:!0,a:!0,"built-in":!0,'function"':!0},"cal.paint({\n  data: {\n    source: data,\n    x: 'column1',\n    y: 'column2',\n    // highlight-next-line\n    groupY: 'sum',\n  },\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Group using a custom function"',title:'"Group',using:!0,a:!0,custom:!0,'function"':!0},"cal.paint({\n  data: {\n    source: data,\n    x: 'column1',\n    y: 'column2',\n    // highlight-start\n    groupY: data => {\n      // data === [3, 4, 5]\n      return data.reduce((a, b) => a + b, 0);\n    },\n    // highlight-end\n  },\n});\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"groupY")," also supports values with non-numeric type, such as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="data.js"',title:'"data.js"'},"var data = [\n  { column1: '2012-01-01', column2: 'Asia' },\n  { column1: '2012-01-01', column2: 'Europe' },\n  { column1: '2012-01-02', column2: 'Asia' },\n];\n")),(0,r.kt)("p",null,"In that case, only the ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," DataGroupType will be available, and you should implement\nyour own ",(0,r.kt)("inlineCode",{parentName:"p"},"groupY")," function if you are grouping your values by another strategy."),(0,r.kt)("h2",{id:"defaultvalue"},(0,r.kt)("inlineCode",{parentName:"h2"},"defaultValue")),(0,r.kt)("p",null,"Default value to use when your dataset does not have a value for a date."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"defaultValue: null | number | string,\n")),(0,r.kt)("p",null,"Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The most common use case will be to set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")),(0,r.kt)("p",{parentName:"admonition"},"This option used to be known as ",(0,r.kt)("inlineCode",{parentName:"p"},"considerMissingDataAsZero")," in the previous versions")))}c.isMDXComponent=!0}}]);